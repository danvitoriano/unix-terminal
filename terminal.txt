NOTES FROM LINUX BASIC TERMINAL CLI
TRANSCRIPTION FROM ELCIO@VISIE.COM.BR VIDEO COURSE


whoami
=============================

=> whoami
returns the username before @


hostname
=============================

=> hostname
returns the hostname after @


~
=============================

=> ~
shortcut for the home folder (/home/danvitoriano)


pwd
=============================

=> pwd
returns the folder's name
~/Documents


cd
=============================

=> cd Desktop
change dir to Desktop folder

=> cd ..
one level up


cp
=============================

=> cp old.txt new.txt
copy file

=> cp file.txt newfolder
copy file to folder

=> cp -r dir
recursive copy dir
copy even if there are files inside


touch
=============================

=> touch new.txt
create a file


mkdir
=============================

=> mkdir docs
create docs folder


tab
=============================

=> cd Desk+(tab key)
complete the command


xgd
=============================

=> xdg-open
open default web browse

=> xdg-open http://www.google.com
open google


cat
=============================

=> ctrl+c
quit cat

=> ctrl+d
done a file

=> cat > doc.txt
write file without vi

=> cat text.txt
only read the file instead of terminal

=> cat old.txt > new.txt
duplicate / same as cp

=> cat > /dev/null
write a text to null


diff
=============================

=> diff dev.txt ux.txt
shows difference between files


vi
=============================

=> sudo apt-get install vim
install vim editor

=> vi text.txt
create a doc

=> :x
exit and save

=> :q
quit

=> :w
save

=> :w!
force save or a command

=> i or insert
insert text

=> esc + /text
search for text into vi editor
'n' search next
'N' search previous


mysql
=============================

=> sudo apt-get install mysql-server
install mysql 
(you will be asked to enter and confirm root password)

=> mysql -uroot -proot
insert username and password to access mysql

=> CREATE DATABASE tuts;
create a tuts name database

=> SHOW DATABASES;
show databases in mysql

=> USE tuts;
selects a database

=> SHOW tables;
shows tables into a database

=> CREATE TABLE IF NOT EXISTS users (user_id int(5) NOT NULL AUTO_INCREMENT, user_name varchar(100) NOT NULL, PRIMARY KEY(user_id));
create a table if not exists and define columns

=> describe users
show detailed information about table columns

=> mysql -uroot -proot tuts < script.sql
execute a command inside tuts database

=> mysql -uroot -proot tuts < script.sql > list.txt
save the contnt from sql command into a txt file

=> SELECT user_id FROM users;
shows registers from user_id column

=> INSERT INTO users (user_name) VALUES ('danilo');
insert values into columns

=> INSERT INTO users (user_name) VALUES ('john'),('maria'),('joe');
insert multiple values into columns


man
=============================

=> man ls
returns manual from a command

=> q
quit manual

=> h
manual help


ls
=============================

=> ls *.txt
list all txt files

=> ls -l
list with more details

=> ls novo.txt -l -h (ls novo.txt -lh)
list file with more details and human readable

=> ls -a (-all)
list all (abbr and full command)
files that begins with '.' are hidden files

=> ls > list.txt
save the list content in a txt file

=> ls notexist > erro.txt
don't save into txt because dir not exist

=> ls notexist > erro.txt 2> saveerror.txt
save the error into second txt file


clear
=============================

=> clear
clear command line screen


mv
=============================

=> mv file.txt folder1
move file to folder

=> mv file.txt new.txt
rename file


rm
=============================

=> rm old.txt
remove file - delete

=> rm noexiste 2> /dev/null
discard the error msg

=> rm notexist 2>> erro.txt
save error after the last line

=> rm -r folder
recursive remove 
removes folder if there are files inside
but asks if there are blocked files

=> rm folder
remove only empty folders

=> rm folder -rf
removes even if there are blocked files


chmod
=============================

=> chmod -w file.txt
change permission
-w: remove write permission for all users

-rw -rw -r--
user - group - all - execute

=> chmod +x file
permission to execute a file

=> sh text.txt
permission to execute and execute a file in runtime

=> chmod g-rw text.txt
remove read and write from group

=> chmod o-rw text.txt
remove read and write from others

trash
=============================

=> trash file.txt
move to trash folder if it's installed

=> trash -list
list trash folder files


twidge
=============================

=> sudo apt-get install twidge
install twitter cliente for command line

=> twidge setup
setup authorization

=> twidge update
update twitter

=> twidge lsrecent
list recents twitter

=> twidge lsreplies
list latest replies


date
=============================

=> date
prints date

=> date > date.txt
save date into txt file

=> date >> date.txt
save date after the last line

=> date >> log.txt; rm notexist 2>> log.txt
save sate and error into a txt file
the ';' separate 2 commands


echo
=============================

=> echo Hoje é `date`
'echo' returns a command
the `` execute a command in line
 

grep
=============================

=> grep banana
== monkeys like 'banana's
highlight search word into a input text

=> grep -i h nomes.txt
ignore case and search for letter 'h' into txt file

=> grep ¨/wp-admin" /var/log/apache2/access.log
search for an expression in a log file

=> grep ¨/wp-admin" /var/log/apache2/access.log > wpadmin.txt
search for an expression in a log file and write found results in a txt

=> grep -e "\s$" list.txt
filter using an regex for any tab '\s' at the end of a line '$'

=> grep -v -e "\s$" list.txt
filter only the odd lines (lines that does not have the search regex)

=> grep -e "\s$" list.txt | sed -e "s/\t/;/" | cut -d ";" -f 1 | sort -u
returns lines with tabs at the line, replace tab '\t' for ';' with sed, cut first field delimited with ';'
and sort unique values '-u'


gedit
=============================

=> gedit syslog.txt
open file in a visual editor


cut
=============================

=> cut -d ";" -f 1,3
=> one;two;three;four;five
== one;three
return first and third field (-f) separated from ";" delimitator (-d)

=> cut -d " " -f 1,3 syslog.txt > syslog2.txt
return first and third field (-f) separated from ";" delimitator (-d) and save results into a new txt file


sort
=============================

=> sort syslog.txt
order a file

=> sort -u syslog.txt
order a file listing unique values


| (pipe)
=============================

=> grep ¨/wp-admin" /var/log/apache2/access.log | cut -d " " -f 1 | sort -u > pipe.txt
search a file for a text, cut the delimited field, sort unique values and save into a txt
the pipe (|) links command after command before save into a file


sed
=============================

=> sed -e "s/.*a/b"
stream editor filter with pipeline command
-e uses an expression
s substitute '.' anything '*' anytime before 'a' for 'b' (regex)

=> sed -e "s/title/p/g"
replace title for p and 'g' means general: for all occurrences, not only in the first


curl
=============================

=> curl http://www.fullcircle.com.br
return the html code from an url

=> curl -s http://www.fullcircle.com.br > index.html
copy html code to a file and -s quiet the return info

=> curl -s http://www.fullcircle.com.br | grep 'html'
returns the lines where 'html' was found

=> curl -s http://www.fullcircle.com.br | grep 'images/portfolio' | sed -e "s/.*alt//" | cut -d '"' -f 2
returns the lines with 'images/portfolio' and apply regex that substitutes anything anytime before 'alt' for empty and
cut the second field using the '"' delimiter

=> vi getportname
and insert the following code:
curl -s http://www.fullcircle.com.br | grep 'images/portfolio' | grep $1 | sed -e "s/.*alt//" | cut -d '"' -f 2
the '$1' is a variable inside the command
now give file an execute permission:
=> chmod +x getportname
execute file passing a word for search instead of variable:
=> ./getportname sesi
and it returns 'sesi' if the word was found

=> vi site.txt
=> ./getportname sesi
=> sh site.txt
should returns sesi
'sh' is the same as +x (chmod to execute a file)


for (shell script)
=============================

=> vi getall
1	for i in a b c; do
2		echo $i
3	done
=> chmod +x getall
=> ./getall
a
b
c

=> vi getall
1	for i in `cat getportname.txt`; do
2		echo "$i;"
3		./getportname
4	done

=> vi feeds.txt
1 http://frontendpro.com.br/feed/
2 http://visie.com.br/feed/

=> vi feedcatcher
1 for $feed in `cat feeds.txt`; do
2	echo "<h1> post titles in $feed</h1>"
3	curl -s $feed | grep '<title>' | tail -n +2 | sed -e "s/title/p/g"
4 done

=> chmod +x feedcatcher
=> ./feedcacther > posttitles.txt


history
=============================

=> history
shows the command history

=> history | grep mysql
find one command in history

=> !109
execute the command with following number in history


tail
=============================

=> tail -n +2
output the last part of a file
'-n' output the last K line instead of 10
'+K' output lines starting with K number

=> curl -s http://frontendpro.com.br/feed/ | grep '<title>' | tail -n +2
return title tags from feed starting at second line


sudo
=============================

=> sudo su
change user to super user (root)

=> adduser curso
add a new user
you are going to be asked about password and other data, after, confirm

=> su curso
change user


ssh
=============================

=> sudo apt-get install ssh
install ssh secure shell to connect one machine into another

=> ssh danvitoriano@localhost
connect to localhost
you should confirm only one time and input password

=> ssh-keygen
generate a ssh key

=> cd .ssh
enter the .ssh hidden folder with keys:
id_rsa: cryptography
id_rsa.pub: descryptography

=> curl fullcircle.com.br/id_rsa.pub > authorized_keys
insert into authorized_keys file the public key at fullcircle.com.br

=> chmod g-rw authorized_keys | chmod o-rw authorized_keys
remove read and write permissions, only user has it

=> ssh curso@curso.fullcircle.com.br
access named host

=> vi script
1 echo "SELECT * FROM users" | mysql -uroot -proot tuts | sed -e "s/\t/;/g"
execute mysql script and replace tabs for ';'

=> ssh curso@curso.fullcircle.com.br ./script > posts.csv
execute script at other server and save results into tabular file

=> vi savespreadsheet
1 cd ~/Desktop/cursos/linux
2 ssh curso@curso.fullcircle.com.br ./script > posts.csv

=> chmod +x savespreadsheet
change permission to execute

=> ./savespreadsheet
execute and save spreadsheet in specified folder

=> exit
exit shell


hosts
=============================

=> sudo vi /etc/hosts
127.0.0.1 curso.fullcircle.com.br


ping
=============================

=> ping curso.fullcircle.com.br
ctrl + c: quit


crontab
=============================

=> crontab -e
open the crontab editor

=> 20 * * * * /home/danvitoriano/Desktop/savespreadsheet
at 20 minute, from any hour, from any month day, from any month, from any week day, execute file


sftp
=============================

=> sftp curso@localhost
opens a ftp connection

=> get posts.csv
get a file from server and save in actual folder

=> ctrl + d
exit sftp
